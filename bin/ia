#!/usr/bin/env ruby

# This file is part of Proyecto Internet Automator
# This project provide a set of scripts/utilities to automatize some 
# develop and syste tasks
#
#
# This software is free software; you can redistribute it and/or modify
# it under the terms of the MIT license.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# MIT License for more details.
#
# Authors:: Jose Alberto Suarez Lopez (mailto:jasuarez@emergya.com)

# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'rainbow'

require 'ia_version'
require 'ia_utils'
require 'ia_fs'
require 'ia_drupal'
require 'ia_apache'
require 'ia_svn'
require 'ia_redmine'
require 'ia_queca'

include GLI

include Ia::Utils
include Ia::Fs
include Ia::Apache
include Ia::Drupal::Files
include Ia::Svn
include Ia::Redmine
include Ia::Queca

program_desc 'Internet Automator'

version Ia::VERSION

desc 'Commitear cambios al repositorio donde es posible'
switch [:c,:commit]

desc 'Pretende ejecutar la accion pero solo muestra que pasaria (no todos los comandos lo soportan)'
switch [:pretend]

desc 'Nombre del proyecto (los nombres de directorios deben de ser homogeneos)'
arg_name 'Nombre del proyecto'
flag [:n,:name]

desc 'Archivo de configuracion de IA (~/.ia_config por defecto)'
default_value File.expand_path('~/.ia_config')
arg_name 'Archivo de configuracion'
flag [:config]

desc 'Servidor remoto donde ejecutar los comandos. (QuecaSDK)'
default_value 'queca.lan'
arg_name 'Remote Queca server'
flag [:r,:remote]

desc 'Interactua con QuecaSDK'
command :queca do |c|
  c.desc 'Prepara el repositorio remoto y el local para poder hacer despliegues en QuecaSDK'
  c.switch [:d,:deploy]
  
  c.desc 'Inicializa el repo en QuecaSDK (avanzado)'
  c.switch [:initremote]

  c.desc 'Sincroniza la BBDD y el directorio files de integracion a QuecaSDK usando alias de drush (necesitas tener configurado los alias en Queca)'
  c.switch [:s,:sync]
  
  c.desc 'Alias drush para usar como fuente de datos'
  c.default_value 'pre'
  c.flag [:src, :source]

  c.desc 'Alias drush para usar como destino de datos'
  c.default_value 'queca'
  c.flag [:tgt, :target]

  c.action do |global_options,options,args|

    command?(options)

    if options[:deploy]
      remote?(global_options)
      pwarn "Se intentara conectar al servidor #{global_options[:remote]}"
    end

    if options[:deploy]
      git?
      name?(global_options)
      queca_prepare_deploy(global_options[:name], global_options[:remote])
    elsif options[:initremote]
      name?(global_options)
      queca_init_remote_git(global_options[:name])
    elsif options[:sync]
      if queca?
        queca_syncdb(options[:source], options[:target])
        queca_syncfiles(options[:source], options[:target])
      else
        perr("Este comando debe ser ejecutado en Queca por seguridad")
      end
    end
  end

end

desc 'Interactua con apache modificando archivos de configuracion'
command :apache do |c|
  c.desc 'Genera configuracion de apache para un proyecto'
  c.switch [:g,:generate]

  c.desc 'Especifica una ruta para guardar el archivo'
  c.arg_name 'ruta'
  c.flag [:p,:path]

  c.desc 'Activa la configuracion y recarga apache'
  c.switch [:e,:enable]

  c.action do |global_options,options,args|
    command?(options)
    name?(global_options)

    if options[:generate]
      pinfo('Generando configuracion de Apache')
      apache_gen_config_file(global_options[:name],options[:path]) if options[:generate]
      apache_enable_site(global_options[:name]) if options[:enable]
    end
  end
end

desc 'Busca potenciales mejoras relacionadas con los ficheros y la estructura'
# arg_name 'files [command[ command]*'
command :drupal do |c|
  c.desc 'Remove insecure files'
  c.switch [:rm,:rmfiles]

  c.action do |global_options,options,args|
    
    command?(options)

    if options[:rmfiles]
      pinfo('Buscando archivos inseguros')
      drupal_rm_files(global_options[:pretend])
    end
  end
end

desc 'Crear o modifica la estructura del repositorio svn'
long_desc 'El comando svn manipula el repositorio svn en el que se ejecuta. Se debe ejecutar en la raiz del repositorio'
# arg_name 'init [command[ command]*]'
command :svn do |c|
  c.desc 'Crea estructura inicial en el repositorio.'
  c.switch [:i,:init]

  # c.desc 'Describe a flag to svn'
  # c.default_value 'default'
  # c.flag :f
  c.action do |global_options,options,args|
    command?(options)
    raise "El directorio actual no es un repositorio".color(:red) unless FileTest::directory?('.svn')

    if options[:init]
      pinfo("Creando estructura SVN...")
      svn_scaffold(global_options[:commit])
    end

  end
end

desc 'Interactua con Redmine usando un archivo en formato CSV'
long_desc 'Este comando usa un archivo CSV (exportado de uan hoja de calculo por ejemplo) para interactuar con un Redmine concreto. Necesita una url y una apikey configurada'
command :redmine do |c|
  c.desc 'Exporta un archivo CSV a Redmine usando REST'
  c.arg_name 'Archivo CSV para leer'
  c.flag [:e,:export]
  
  c.action do |global_options,options,args|
    command?(options)

    if options[:export]
      pinfo('Exportando tareas a Redmine')
      redmine_export_csv(options[:export], global_options[:config])
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  if global[:commit]
    puts('*** los cambios seran aplicados al repo (3s para cancelar ctrl+c) *** '.color(:yellow))
    sleep 3
  end

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
